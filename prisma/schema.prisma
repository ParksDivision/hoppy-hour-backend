generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                String           @id @default(uuid())
  address           String
  latitude          Float
  longitude         Float
  name              String
  createdBy         Int?             @map("created_by")
  createdOn         DateTime         @default(now()) @map("created_on")
  deletedBy         Int?             @map("deleted_by")
  deletedOn         DateTime?        @map("deleted_on")
  isBar             Boolean?         @default(false) @map("is_bar")
  isRestaurant      Boolean?         @default(false) @map("is_restaurant")
  placeId           String?          @unique @map("place_id")
  priceLevel        Int?             @map("price_level")
  ratingGoogle      Float?           @map("rating_google")
  ratingOverall     Float?           @map("rating_overall")
  ratingYelp        Float?           @map("rating_yelp")
  updatedBy         Int?             @map("updated_by")
  updatedOn         DateTime?        @updatedAt @map("updated_on")
  userId            String?          @unique @map("user_id")
  yelpId            String?          @unique @map("yelp_id")
  categories        String[]         @default([])
  confidence        Float            @default(1.0)
  domain            String?
  lastAnalyzed      DateTime?        @map("last_analyzed")
  normalizedAddress String?          @map("normalized_address")
  normalizedName    String?          @map("normalized_name")
  normalizedPhone   String?          @map("normalized_phone")
  phone             String?
  website           String?
  operatingHours    String[]         @default([]) @map("operating_hours")
  user              User?            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deals             Deal[]
  photos            Photo[]
  s3Operations      S3Operation[]
  sourceBusinesses  SourceBusiness[]
  userComments      UserComments[]
  userVotes         UserVotes[]

  @@index([latitude, longitude])
  @@index([normalizedName])
  @@index([domain])
  @@index([normalizedPhone])
  @@index([name])
  @@index([isBar, isRestaurant])
  @@map("businesses")
}

model SourceBusiness {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  source      String
  sourceId    String    @map("source_id")
  rawData     Json      @map("raw_data")
  lastFetched DateTime  @map("last_fetched")
  createdOn   DateTime  @default(now()) @map("created_on")
  createdBy   Int?      @map("created_by")
  updatedOn   DateTime? @updatedAt @map("updated_on")
  updatedBy   Int?      @map("updated_by")
  deletedOn   DateTime? @map("deleted_on")
  deletedBy   Int?      @map("deleted_by")
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([source, sourceId])
  @@index([businessId])
  @@map("source_businesses")
}

model Deal {
  id          String    @id @default(uuid())
  businessId  String    @map("business_id")
  title       String
  description String
  dayOfWeek   Int?      @map("day_of_week")
  startTime   String?   @map("start_time")
  endTime     String?   @map("end_time")
  validFrom   DateTime? @map("valid_from")
  validUntil  DateTime? @map("valid_until")
  extractedBy String    @map("extracted_by")
  confidence  Float     @default(1.0)
  sourceText  String?   @map("source_text")
  isActive    Boolean   @default(true) @map("is_active")
  isVerified  Boolean   @default(false) @map("is_verified")
  createdOn   DateTime  @default(now()) @map("created_on")
  createdBy   Int?      @map("created_by")
  updatedOn   DateTime? @updatedAt @map("updated_on")
  updatedBy   Int?      @map("updated_by")
  deletedOn   DateTime? @map("deleted_on")
  deletedBy   Int?      @map("deleted_by")
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([isActive, dayOfWeek])
  @@index([businessId, isActive])
  @@map("deals")
}

model Photo {
  id             String    @id @default(uuid())
  source         String
  width          Int?
  height         Int?
  url            String?
  businessId     String    @map("business_id")
  createdBy      Int?      @map("created_by")
  createdOn      DateTime  @default(now()) @map("created_on")
  deletedBy      Int?      @map("deleted_by")
  deletedOn      DateTime? @map("deleted_on")
  lastFetched    DateTime? @map("last_fetched")
  mainPhoto      Boolean   @default(false) @map("main_photo")
  sourceId       String    @map("source_id")
  updatedBy      Int?      @map("updated_by")
  updatedOn      DateTime? @updatedAt @map("updated_on")
  format         String?
  fileSize       Int?      @map("file_size")
  lastProcessed  DateTime? @map("last_processed")
  processingTime Float?    @map("processing_time")
  s3Key          String?   @map("s3_key")
  s3KeyLarge     String?   @map("s3_key_large")
  s3KeyMedium    String?   @map("s3_key_medium")
  s3KeySmall     String?   @map("s3_key_small")
  s3KeyThumbnail String?   @map("s3_key_thumbnail")
  business       Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, sourceId])
  @@index([businessId])
  @@index([mainPhoto])
  @@map("photos")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique @db.VarChar(75)
  password        String
  address         String?
  accountType     String?          @map("account_type")
  createdBy       Int?             @map("created_by")
  createdOn       DateTime         @default(now()) @map("created_on")
  dateOfBirth     String?          @map("date_of_birth")
  deletedBy       Int?             @map("deleted_by")
  deletedOn       DateTime?        @map("deleted_on")
  firstName       String           @map("first_name") @db.VarChar(50)
  lastLogin       DateTime?        @map("last_login")
  lastName        String           @map("last_name") @db.VarChar(50)
  phoneNumber     String?          @unique @map("phone_number") @db.VarChar(30)
  updatedBy       Int?             @map("updated_by")
  updatedOn       DateTime?        @updatedAt @map("updated_on")
  business        Business?
  userComments    UserComments[]
  userPreferences UserPreferences?
  userVotes       UserVotes[]

  @@map("users")
}

model UserComments {
  id         String    @id @default(uuid())
  comment    String    @db.VarChar(1000)
  businessId String    @map("business_id")
  createdBy  Int?      @map("created_by")
  createdOn  DateTime  @default(now()) @map("created_on")
  deletedBy  Int?      @map("deleted_by")
  deletedOn  DateTime? @map("deleted_on")
  updatedBy  Int?      @map("updated_by")
  updatedOn  DateTime? @updatedAt @map("updated_on")
  userId     String    @map("user_id")
  business   Business  @relation(fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_comments")
}

model UserPreferences {
  id          String    @id @default(uuid())
  preferences String
  createdBy   Int?      @map("created_by")
  createdOn   DateTime  @default(now()) @map("created_on")
  deletedBy   Int?      @map("deleted_by")
  deletedOn   DateTime? @map("deleted_on")
  updatedBy   Int?      @map("updated_by")
  updatedOn   DateTime? @updatedAt @map("updated_on")
  userId      String    @unique @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_preferences")
}

model UserVotes {
  id         String    @id @default(uuid())
  upvote     Boolean?  @default(false)
  downvote   Boolean?  @default(false)
  businessId String    @map("business_id")
  createdBy  Int?      @map("created_by")
  createdOn  DateTime  @default(now()) @map("created_on")
  deletedBy  Int?      @map("deleted_by")
  deletedOn  DateTime? @map("deleted_on")
  updatedBy  Int?      @map("updated_by")
  updatedOn  DateTime? @updatedAt @map("updated_on")
  userId     String    @map("user_id")
  business   Business  @relation(fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_votes")
}

model ApiDataGoogle {
  id          String    @id @default(uuid())
  data        String
  requestedOn DateTime  @map("requested_on")
  createdBy   Int?      @map("created_by")
  createdOn   DateTime  @default(now()) @map("created_on")
  deletedBy   Int?      @map("deleted_by")
  deletedOn   DateTime? @map("deleted_on")
  updatedBy   Int?      @map("updated_by")
  updatedOn   DateTime? @updatedAt @map("updated_on")

  @@map("api_data_google")
}

model ApiDataYelp {
  id          String    @id @default(uuid())
  data        String
  requestedOn DateTime  @map("requested_on")
  createdBy   Int?      @map("created_by")
  createdOn   DateTime  @default(now()) @map("created_on")
  deletedBy   Int?      @map("deleted_by")
  deletedOn   DateTime? @map("deleted_on")
  updatedBy   Int?      @map("updated_by")
  updatedOn   DateTime? @updatedAt @map("updated_on")

  @@map("api_data_yelp")
}

model S3Operation {
  id            String  @id @default(uuid())
  operationType String // 'PUT', 'GET', 'DELETE', 'LIST'
  estimatedCost Float // Cost in USD
  bytes         Int? // Size of operation in bytes
  businessId    String? // Optional link to business
  photoId       String? // Optional link to photo
  s3Key         String? // The S3 key that was operated on
  cdnPurged     Boolean @default(false) // Whether CDN cache was purged

  // Relationships
  business Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)

  // Audit fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([operationType])
  @@index([businessId])
  @@index([s3Key])
  @@map("s3_operations")
}

model CostBudget {
  id                 String @id @default(uuid())
  monthYear          String @unique // Format: "2025-01" 
  totalBudget        Float  @default(20.00) // Monthly budget in USD
  currentSpent       Float  @default(0.00)
  alertThreshold     Float  @default(0.80) // 80% threshold
  emergencyThreshold Float  @default(0.95) // 95% threshold

  // Rate limiting
  maxRequestsPerHour Int @default(1000)
  maxRequestsPerDay  Int @default(10000)

  // CDN settings
  cdnBandwidthUsed Float @default(0.00) // GB used this month
  cdnRequestsUsed  Int   @default(0) // CDN requests this month

  // Status
  isActive       Boolean @default(true)
  budgetExceeded Boolean @default(false)
  alertSent      Boolean @default(false)
  emergencyMode  Boolean @default(false)

  // Audit fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([monthYear])
  @@map("cost_budgets")
}
